package fraction;
public class Fraction{
	//attributes
	private int n;
	private int d;
	private String f;
	private int wholeNumber;
	//To calculate GCD of two numbers
	static int gcd(int n, int d)
	{
		while(n!=0 && d!=0) // until either one of them is 0
		{
			n=Math.abs(n);
			int r = Math.abs(d);
			d = n%d;
			n = r;
		}
		return n+d; // either one is 0, so return the non-zero value
	}
	//Function to Normalize fraction nn- numerator dd- denominator
	static int[] normalize(int nn, int dd) {
		int gc=gcd(nn,dd);
		if(nn*dd<0) {
			if((nn<0)&(dd>0)) {
				nn=nn/gc;
				dd=dd/gc;
			}
			else {
				dd=(dd*-1)/gc;
				nn=(nn*-1)/gc;
			}
		}
		else if(nn==0) {
			nn=0;
			dd=1;
		}
		else {
			if(nn<0) {
				dd=(dd*-1)/gc;
				nn=(nn*-1)/gc;
			}
			else {
				dd=dd/gc;
				nn=nn/gc;
			}
		}	
		int[] array=new int[2];
		array[0]=nn;
		array[1]=dd;
		return array;
	}
	// Constructor 1
	public Fraction(int numerator,int denominator) {
		if(denominator==0) {
			System.out.println("Denominator Cannot be zero!");
		}
		else {
			int[] array=normalize(numerator,denominator);
			setNumerator(array[0]);
			setDenominator(array[1]);
		}
		
	}
	/////////////////constructor 2
	public Fraction(int wholeNumber) {
		int denominator=1;
		setDenominator(denominator);
		setNumerator(wholeNumber);
	}
	/////////////////constructor 3
	public Fraction(String fraction) {
		f=fraction;
		int numerator = Integer.parseInt(f.split("/")[0]);
		int denominator;
		if (f.split("/").length == 1)
		{
			denominator=1;
			setDenominator(denominator);
			setNumerator(numerator);
		}
		else
		{
			denominator=Integer.parseInt(fraction.split("/")[1]);
			if(denominator==0) {
				System.out.println("Denominator Cannot be zero!");
			}
			else {
				int[] array=normalize(numerator,denominator);
				numerator=array[0];
				denominator=array[1];
				setDenominator(denominator);
				setNumerator(numerator);
			}
		}	
	}
	/////getters

	public int getNumerator() {
		return n;
	}
	public int getDenominator() {
		return d;
	}
	/////setters
	public void setNumerator(int numerator) {
		n=numerator;
	}
	public void setDenominator(int denominator) {
		d=denominator;
	}	
	////////////////					Methods
	public Fraction add(Fraction af)
	{		
		int num=af.getNumerator();
		int den=af.getDenominator();
		int res_n = (n*den + d*num);
		int res_d = d*den;
		Fraction result = new Fraction(res_n,res_d);
		return result;
	}

	public Fraction subtract(Fraction sf)
	{
		int num=sf.getNumerator();
		int den=sf.getDenominator();
		int res_n = ((n*den) - (d*num));
		int res_d = d*den;
		Fraction result = new Fraction(res_n,res_d);
		return result;
	}

	public Fraction multiply(Fraction mf)
	{
		int num=mf.getNumerator();
		int den=mf.getDenominator();
		int res_n = n*num;
		int res_d = d*den;
		Fraction result = new Fraction(res_n+"/"+res_d);
		return result;
	}
	public Fraction divide(Fraction df)
	{
		int num=df.getNumerator();
		int den=df.getDenominator();
		int res_n = n*den;
		int res_d = d*num;
		Fraction result = new Fraction(res_n,res_d);
		return result;
	}
	public Fraction abs()
	{
		n=Math.abs(n);
		Fraction result= new Fraction(n,d);
		return result;
	}
	public Fraction negate()
	{
		Fraction result= new Fraction((-1*n),d);
		return result;
	}

	public Fraction inverse()
	{
		Fraction result= new Fraction(d+"/"+n);
		return result;
	}
	/*
	public int compareTo(Fraction f) {
		int num=f.getNumerator();
		int den=f.getDenominator();
		float fractionF=num/den;
		float fractionThis=n/d;
		if(fractionThis<fractionF) {
			return -1;
		}
		else if(fractionThis>fractionF) {
			return 0;
		}
		else {
			return 1;
		}
	}*/
	public String toString(){
		String temp;
		if(d==1) {
			temp=Integer.toString(n);
		}
		else {
			temp=n+"/"+d;
		}
		return temp;
	}
	// To check if user has entered the correct syntax for fraction
	public boolean toCheck(String check) {
		int strLen = check.length();
		for (int i = 0; i < strLen; i++) {
			if (Character.isWhitespace(check.charAt(i))) {
				return false;
			}
		}
		return true;
	}
}
